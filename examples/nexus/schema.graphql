### This file was generated by Nexus Schema
### Do not make changes to this file directly

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Comment {
  author: User
  authorId: Int
  contain: String!
  id: Int!
  post: Post!
  postId: Int!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentInput
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentInput
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  authorId: OrderByArg
  contain: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  postId: OrderByArg
  updatedAt: OrderByArg
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: NullableIntFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentInput
  contain: String
  createdAt: DateTime
  id: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTime
}

input CommentUpdateManyDataInput {
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateManyMutationInput {
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutAuthorDataInput {
  contain: String
  createdAt: DateTime
  id: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTime
}

input CommentUpdateWithoutPostDataInput {
  author: UserUpdateOneWithoutCommentInput
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  post: PostWhereInput
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: Int
}

"""
Date custom scalar type
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Group {
  id: Int!
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
  ): [User!]!
}

input GroupCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  updatedAt: OrderByArg
}

input GroupUpdateInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input GroupUpdateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutUsersDataInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input GroupUpsertWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  update: GroupUpdateWithoutUsersDataInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  updatedAt: DateTimeFilter
  users: UserFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): BatchPayload
  deleteManyUser(where: UserWhereInput): BatchPayload
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyComment(
    data: CommentUpdateManyMutationInput!
    where: CommentWhereInput
  ): BatchPayload
  updateManyPost(
    data: PostUpdateManyMutationInput!
    where: PostWhereInput
  ): BatchPayload
  updateManyUser(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload
  updateOneComment(
    data: CommentUpdateInput!
    where: CommentWhereUniqueInput!
  ): Comment!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User
  authorId: Int
  comments(
    after: CommentWhereUniqueInput
    before: CommentWhereUniqueInput
    first: Int
    last: Int
    orderBy: CommentOrderByInput
    skip: Int
    where: CommentWhereInput
  ): [Comment!]!
  id: Int!
  published: Boolean!
  title: String!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  authorId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  published: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: NullableIntFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutPostsInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: NullableIntFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  findManyComment(
    after: CommentWhereUniqueInput
    before: CommentWhereUniqueInput
    first: Int
    last: Int
    orderBy: CommentOrderByInput
    skip: Int
    where: CommentWhereInput
  ): [Comment!]
  findManyCommentCount(
    after: CommentWhereUniqueInput
    before: CommentWhereUniqueInput
    first: Int
    last: Int
    orderBy: CommentOrderByInput
    skip: Int
    where: CommentWhereInput
  ): Int
  findManyGroup(
    after: GroupWhereUniqueInput
    before: GroupWhereUniqueInput
    first: Int
    last: Int
    orderBy: GroupOrderByInput
    skip: Int
    where: GroupWhereInput
  ): [Group!]
  findManyGroupCount(
    after: GroupWhereUniqueInput
    before: GroupWhereUniqueInput
    first: Int
    last: Int
    orderBy: GroupOrderByInput
    skip: Int
    where: GroupWhereInput
  ): Int
  findManyPost(
    after: PostWhereUniqueInput
    before: PostWhereUniqueInput
    first: Int
    last: Int
    orderBy: PostOrderByInput
    skip: Int
    where: PostWhereInput
  ): [Post!]
  findManyPostCount(
    after: PostWhereUniqueInput
    before: PostWhereUniqueInput
    first: Int
    last: Int
    orderBy: PostOrderByInput
    skip: Int
    where: PostWhereInput
  ): Int
  findManyUser(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
  ): [User!]
  findManyUserCount(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
  ): Int
  findOneComment(where: CommentWhereUniqueInput!): Comment
  findOneGroup(where: GroupWhereUniqueInput!): Group
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneUser(where: UserWhereUniqueInput!): User
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  Comment(
    after: CommentWhereUniqueInput
    before: CommentWhereUniqueInput
    first: Int
    last: Int
    orderBy: CommentOrderByInput
    skip: Int
    where: CommentWhereInput
  ): [Comment!]!
  email: String!
  group: Group
  groupId: Int
  id: Int!
  name: String
  posts(
    after: PostWhereUniqueInput
    before: PostWhereUniqueInput
    first: Int
    last: Int
    orderBy: PostOrderByInput
    skip: Int
    where: PostWhereInput
  ): [Post!]!
}

input UserCreateInput {
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGroupInput!]
}

input UserCreateOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentInput {
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutGroupInput {
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  name: String
  password: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  groupId: OrderByArg
  id: OrderByArg
  name: OrderByArg
  password: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  Comment: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  groupId: NullableIntFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  posts: PostFilter
}

input UserUpdateInput {
  Comment: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: Int
  name: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  email: String
  id: Int
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  createdAt: DateTime
  email: String
  id: Int
  name: String
  password: String
}

input UserUpdateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGroupInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentDataInput
  upsert: UserUpsertWithoutCommentInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentDataInput {
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: Int
  name: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGroupDataInput {
  Comment: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  id: Int
  name: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  Comment: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: Int
  name: String
  password: String
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  data: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  update: UserUpdateWithoutCommentDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  create: UserCreateWithoutGroupInput!
  update: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Comment: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  group: GroupWhereInput
  groupId: NullableIntFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  posts: PostFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
